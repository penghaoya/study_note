// docs/.vitepress/config.ts
import { defineConfig } from "file:///D:/note/study_note/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/scripts/generateSidebar.ts
import fs from "node:fs/promises";
import path from "node:path";
async function buildSidebar(directory, basePath = "") {
  const items = await fs.readdir(directory);
  const sortedItems = items.sort(
    (a, b) => a.localeCompare(b, void 0, { numeric: true, sensitivity: "base" })
  );
  const result = await Promise.all(
    sortedItems.map(async (item) => {
      const itemPath = path.join(directory, item);
      const itemStat = await fs.stat(itemPath);
      if (!itemStat.isDirectory() && item.endsWith(".md")) {
        const text = item.replace(/^\d+\./, "").replace(/\.md$/, "");
        const link = `${basePath}/${item.replace(/\.md$/, "")}`;
        return { text, link };
      }
    })
  );
  return result.filter(Boolean);
}

// docs/.vitepress/sidebar/base.ts
import path2 from "path";
var __vite_injected_original_dirname = "D:\\note\\study_note\\docs\\.vitepress\\sidebar";
var baseDir = path2.resolve(__vite_injected_original_dirname, "./../../web/framework");
var web = [
  {
    text: "\u{1F6A8}\u524D\u7AEF\u57FA\u7840",
    link: "/web/",
    collapsed: true,
    items: [
      { text: "HTML" },
      { text: "Css" },
      {
        text: "JavaScript",
        collapsed: true,
        items: await buildSidebar(
          path2.join(__vite_injected_original_dirname, "./../../web/base/js"),
          "/web/base/js"
        )
      }
    ]
  },
  { text: "\u{1F310}\u8BA1\u7B97\u673A\u7F51\u7EDC", collapsed: true, items: [{ text: "\u7F51\u7EDC" }] },
  {
    text: "\u{1F4E6}\u5DE5\u7A0B\u5316",
    collapsed: true,
    link: "/link/",
    items: [
      { text: "Webpack", items: [{ text: "\u5FEB\u901F\u5165\u95E8" }] },
      { text: "Vite", items: [{ text: "\u5FEB\u901F\u5165\u95E8" }] }
    ]
  },
  {
    text: "\u{1F44C}\u6846\u67B6",
    collapsed: true,
    items: [
      {
        text: "Vue",
        collapsed: true,
        items: await buildSidebar(
          path2.join(baseDir, "vue"),
          "/web/framework/vue"
        )
      },
      {
        text: "React",
        collapsed: true,
        items: await buildSidebar(
          path2.join(baseDir, "react"),
          "/web/framework/react"
        )
      }
    ]
  }
];

// docs/.vitepress/sidebar/devops.ts
import path3 from "path";
var __vite_injected_original_dirname2 = "D:\\note\\study_note\\docs\\.vitepress\\sidebar";
var devops = [
  {
    text: "Linux",
    collapsed: true,
    items: await buildSidebar(
      path3.resolve(__vite_injected_original_dirname2, "./../../devops/Linux"),
      "/devops/Linux"
    )
  },
  {
    text: "Docker",
    collapsed: true,
    items: await buildSidebar(
      path3.resolve(__vite_injected_original_dirname2, "./../../devops/docker"),
      "/devops/docker"
    )
  },
  {
    text: "Nginx",
    collapsed: true,
    items: await buildSidebar(
      path3.resolve(__vite_injected_original_dirname2, "./../../devops/nginx"),
      "/devops/nginx"
    )
  }
];

// docs/.vitepress/sidebar/backend.ts
import path4 from "path";
var __vite_injected_original_dirname3 = "D:\\note\\study_note\\docs\\.vitepress\\sidebar";
var backend = [
  {
    text: "Node.js",
    collapsed: true,
    items: [
      ...await buildSidebar(
        path4.resolve(__vite_injected_original_dirname3, "./../../backend/node"),
        "/backend/node/"
      )
    ]
  },
  {
    text: "NestJs",
    collapsed: true,
    items: await buildSidebar(
      path4.resolve(__vite_injected_original_dirname3, "./../../backend/node/Nestjs"),
      "/backend/node/Nestjs"
    )
  }
];

// docs/.vitepress/sidebar/daily.ts
import path5 from "path";
var __vite_injected_original_dirname4 = "D:\\note\\study_note\\docs\\.vitepress\\sidebar";
var daily = [
  {
    text: "\u73AF\u5883\u5B89\u88C5",
    collapsed: true,
    items: await buildSidebar(
      path5.resolve(__vite_injected_original_dirname4, "./../../daily/appinstall"),
      "/daily/appinstall"
    )
  },
  {
    text: "\u63D0\u6548\u7387\u5DE5\u5177",
    collapsed: true,
    items: await buildSidebar(
      path5.resolve(__vite_injected_original_dirname4, "./../../daily/software"),
      "/daily/software"
    )
  },
  {
    text: "\u5B66\u4E60\u65B9\u6CD5",
    collapsed: true,
    items: await buildSidebar(
      path5.resolve(__vite_injected_original_dirname4, "./../../daily/study"),
      "/daily/study"
    )
  }
];

// docs/.vitepress/sidebar/index.ts
var sidebar = {
  "/web/": web,
  "/devops/": devops,
  "/backend/": backend,
  "/daily/": daily
};

// docs/.vitepress/scripts/vitepress-md-assets-plugin.ts
import fs2 from "fs";
import path6 from "path";
function vitepressMdAssetsPlugin(options = {}) {
  const outputDir = options.outputDir || "docs/.vitepress/dist";
  const docsDir = options.docsDir || "docs";
  const filter = (id) => {
    if (options.exclude) {
      const excludes = Array.isArray(options.exclude) ? options.exclude : [options.exclude];
      if (excludes.some((pattern) => id.match(pattern)))
        return false;
    }
    if (options.include) {
      const includes = Array.isArray(options.include) ? options.include : [options.include];
      return includes.some((pattern) => id.match(pattern));
    }
    return /\.md$/.test(id);
  };
  return {
    name: "vitepress-md-assets",
    enforce: "pre",
    apply: "build",
    transform(src, id) {
      if (!filter(id))
        return null;
      const imgRegex = /!\[.*?\]\((\.\/assets\/.*?\.(png|jpe?g|gif|svg))\)/gi;
      let newSrc = src;
      for (const match of src.matchAll(imgRegex)) {
        const [imgTag, relativePath] = match;
        const absolutePath = path6.resolve(path6.dirname(id), relativePath);
        const relativeToDocs = path6.relative(docsDir, absolutePath);
        const outputPath = path6.resolve(
          process.cwd(),
          outputDir,
          relativeToDocs
        );
        if (!fs2.existsSync(path6.dirname(outputPath))) {
          fs2.mkdirSync(path6.dirname(outputPath), { recursive: true });
        }
        const fileData = fs2.readFileSync(absolutePath);
        fs2.writeFileSync(outputPath, fileData);
        const newRelativePath = path6.relative(process.cwd(), outputPath).replace(/\\/g, "/");
        newSrc = newSrc.replace(
          imgTag,
          imgTag.replace(relativePath, `/${newRelativePath}`)
        );
      }
      return { code: newSrc, map: null };
    }
  };
}

// docs/.vitepress/config.ts
var config_default = defineConfig({
  title: "\u5C0F\u4EE3\u7684\u77E5\u8BC6\u5E93",
  description: "\u5B66\u4E60\u7B14\u8BB0",
  themeConfig: {
    outline: "deep",
    siteTitle: "\u77E5\u8BC6\u5E93",
    logo: "/mylogo.svg",
    docFooter: { prev: "\u4E0A\u4E00\u7BC7", next: "\u4E0B\u4E00\u7BC7" },
    returnToTopLabel: "\u8FD4\u56DE\u9876\u90E8",
    outlineTitle: "\u5BFC\u822A\u680F",
    darkModeSwitchLabel: "\u5916\u89C2",
    sidebarMenuLabel: "\u5F52\u6863",
    search: {
      provider: "local",
      options: {
        locales: {
          zh: {
            translations: {
              button: {
                buttonText: "\u641C\u7D22\u6587\u6863",
                buttonAriaLabel: "\u641C\u7D22\u6587\u6863"
              },
              modal: {
                noResultsText: "\u65E0\u6CD5\u627E\u5230\u76F8\u5173\u7ED3\u679C",
                resetButtonTitle: "\u6E05\u9664\u67E5\u8BE2\u6761\u4EF6",
                footer: {
                  selectText: "\u9009\u62E9",
                  navigateText: "\u5207\u6362"
                }
              }
            }
          }
        }
      }
    },
    nav: [
      { text: "\u{1F6D6}\u4E3B\u9875", link: "/" },
      { text: "\u524D\u7AEF", items: [{ text: "\u{1F6D6}\u4E3B\u9875", link: "/" }] }
    ],
    sidebar,
    socialLinks: [
      {
        icon: {
          svg: `<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg"id="Layer_1"data-name="Layer 1"viewBox="0 0 500 500"><defs><style>.cls-1{fill:#231f20}</style></defs><path class="cls-1"d="M184.735,419.676c-27.157,0-55.841-9.779-80.794-27.547C78.469,373.988,59.667,349.55,51,323.315c-8.958-27.112-6.127-52.949,7.972-72.752l7.53-10.575,19.78,37.459,26.278-4.044,4.964,32.275,47.5-7.5,1.916,32.659h19.813L203.6,356.1l23.971-12.5,3.32,14.04,23.027-8.786v37.417l-1.5,2.088c-.485.677-.97,1.331-1.466,1.986-14.539,18.882-37.973,29.282-66.021,29.331ZM65.447,272.262c-12.119,32.794,7.067,77.843,47.776,106.834,22.263,15.854,47.653,24.58,71.511,24.58h.169c22.766-.04,41.567-8.072,53.013-22.63v-8.962L219.523,379.1l-2.792-11.8-18.475,9.637-20.067-30.1H151.851l-1.768-30.1-45.934,7.25-4.973-32.335-21.725,3.343Z"/><path class="cls-1"d="M315.265,419.676h-.2c-28.048-.049-51.482-10.449-65.986-29.285-.53-.7-1.016-1.354-1.5-2.032l-1.5-2.088V348.854l23.026,8.786,3.321-14.04L296.4,356.1l16.847-25.269h19.812l1.918-32.659,47.5,7.5,4.964-32.275,26.279,4.044L433.5,239.988l7.529,10.575c14.1,19.8,16.932,45.64,7.973,72.752-8.669,26.235-27.472,50.673-52.944,68.814h0C371.107,409.9,342.421,419.676,315.265,419.676Zm-53.181-38.63c11.411,14.543,30.227,22.59,53.013,22.63h.169c23.859,0,49.247-8.725,71.511-24.58,40.709-28.992,59.9-74.04,47.777-106.834l-12,22.732-21.726-3.343-4.972,32.335-45.936-7.25-1.766,30.1H321.812l-20.068,30.1L283.269,367.3l-2.792,11.8-18.393-7.018Z"/><path class="cls-1"d="M250,214.587a8,8,0,0,1-3.133-.639c-.54-.23-13.323-5.721-22.576-13.946-9.33-8.293-15.148-20.748-15.391-21.273a8,8,0,0,1,7.262-11.356h67.676A8,8,0,0,1,291.2,178.5,68.237,68.237,0,0,1,275.52,200.1c-9.243,8.331-21.911,13.655-22.446,13.878A8.008,8.008,0,0,1,250,214.587Zm-19.444-31.214a37.967,37.967,0,0,0,4.365,4.67,72.7,72.7,0,0,0,15.1,9.721,68.3,68.3,0,0,0,14.783-9.554,45.283,45.283,0,0,0,4.6-4.837Z"/><path class="cls-1"d="M135.307,289.753c-.377-3.852-.569-7.674-.569-11.361a115.085,115.085,0,0,1,35.837-83.512,86.7,86.7,0,1,1,158.851,0,115.094,115.094,0,0,1,35.836,83.513c0,3.684-.192,7.506-.569,11.36l-15.923-1.559c.326-3.337.492-6.634.492-9.8a99.128,99.128,0,0,0-34.837-75.5l-4.875-4.162,3-5.665a70.7,70.7,0,1,0-125.094,0l3,5.665-4.876,4.162a99.131,99.131,0,0,0-34.837,75.5c0,3.168.166,6.465.493,9.8Z"/></svg>`
        },
        link: "https://github.com/"
      }
    ],
    footer: {
      message: "\u5C11\u62B1\u6028\uFF0C\u591A\u601D\u8003\uFF0C\u672A\u6765\u66F4\u7F8E\u597D",
      copyright: "Copyright \xA9 2023-present XD"
    }
  },
  vite: {
    plugins: [vitepressMdAssetsPlugin()]
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
